<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- add entry to enable component scanning -->

	<context:component-scan base-package="com.luv2code.springdemo" />
	
	<!-- load the properties file: sports.properti,es -->
	<context:property-placeholder location="classpath:sport.properties"/> 

	<!-- Define the dependency, object instantiated here-->
		
	<bean id="myFortuneService" class="com.luv2code.springdemo.HappyFortuneService">
	</bean>

	<bean id="myCoach" class="com.luv2code.springdemo.ChessCoach">
	
		<!-- set up constructor injection --> 
		<constructor-arg ref="myFortuneService"/>
	</bean>

	<bean id="myCricketCoach" class="com.luv2code.springdemo.CricketCoach">
		<property name="fortuneService" ref="myFortuneService"></property>
		
		<property name="emailAddress" value="${foo.email}"></property>
		<property name="team" value="${foo.team}"></property>
	</bean>


</beans>

<!-- 
Observations so far: 
- beanIDs look like object variables 
- Spring shifts context of hard-coding object creations into these applicationContexts
- Note that you have to define the constructor which spring will inject into myCoach
-->




